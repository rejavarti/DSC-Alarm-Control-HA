# Home Assistant Configuration for DSC Alarm System
# This file demonstrates the correct YAML structure to avoid common configuration errors
# 
# IMPORTANT: Each top-level section (mqtt, alarm_control_panel, sensor, etc.) must be at 
# the root level of the YAML file, NOT nested under other sections.

# Default Home Assistant configuration
default_config:

# MQTT Configuration - TOP LEVEL SECTION
# This configures the MQTT broker connection
mqtt:
  broker: !secret mqtt_broker_ip
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  client_id: homeassistant_dsc
  keepalive: 60
  discovery: true
  birth_message:
    topic: "homeassistant/status"
    payload: "online"
  will_message:
    topic: "homeassistant/status" 
    payload: "offline"

# ⚠️  IMPORTANT: MQTT Entity Configuration Deprecated
# 
# Alarm Control Panel, Sensor, Binary Sensor, and Button MQTT entities are no longer 
# configured via YAML. Use MQTT Discovery or the Home Assistant UI instead.
#
# This example shows only the supported YAML configurations:
# - MQTT broker setup (still required)
# - Automations (fully supported)
# - Template sensors/binary_sensors (fully supported)
# - Input helpers and other non-MQTT platforms
#
# For MQTT entities, use one of these methods:
# 1. ESPHome with MQTT Discovery (recommended - see extras/ESPHome/DscAlarm.yaml)
# 2. Manual configuration via Settings > Devices & Services > MQTT

# Template sensors are still supported in YAML
sensor:
  # Time/Date sensors are still supported  
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      
  # Template sensors are still supported
  - platform: template
    sensors:
      dsc_system_status_summary:
        friendly_name: "DSC System Status Summary"
        value_template: >
          {% if is_state('alarm_control_panel.dsc_1500_alarm_panel', 'armed_away') %}
            Armed Away
          {% elif is_state('alarm_control_panel.dsc_1500_alarm_panel', 'armed_home') %}
            Armed Home
          {% elif is_state('alarm_control_panel.dsc_1500_alarm_panel', 'disarmed') %}
            Disarmed
          {% else %}
            Unknown
          {% endif %}
        icon_template: >
          {% if is_state('alarm_control_panel.dsc_1500_alarm_panel', 'armed_away') %}
            mdi:shield-lock
          {% elif is_state('alarm_control_panel.dsc_1500_alarm_panel', 'armed_home') %}
            mdi:shield-home
          {% elif is_state('alarm_control_panel.dsc_1500_alarm_panel', 'disarmed') %}
            mdi:shield-off
          {% else %}
            mdi:shield-alert
          {% endif %}

# Template binary sensors are still supported in YAML
binary_sensor:
  - platform: template
    sensors:
      any_door_open:
        friendly_name: "Any DSC Door Open"
        value_template: >
          {{ is_state('binary_sensor.back_door', 'on') or 
             is_state('binary_sensor.front_door', 'on') or
             is_state('binary_sensor.upper_patio_door', 'on') }}
        device_class: door
        icon_template: >
          {% if is_state('binary_sensor.any_door_open', 'on') %}
            mdi:door-open
          {% else %}
            mdi:door-closed
          {% endif %}

# Input helpers are still supported in YAML
input_boolean:
  dsc_maintenance_mode:
    name: "DSC Maintenance Mode"
    icon: mdi:wrench
    
input_number:
  dsc_arm_delay:
    name: "DSC Arm Delay"
    min: 0
    max: 300
    step: 10
    unit_of_measurement: seconds
    icon: mdi:timer

# Scripts are still supported in YAML
script:
  dsc_arm_away_with_delay:
    alias: "Arm DSC Away (with delay)"
    description: "Arm the DSC system in away mode with configurable delay"
    sequence:
      - delay: 
          seconds: "{{ states('input_number.dsc_arm_delay') | int }}"
      - service: alarm_control_panel.alarm_arm_away
        target:
          entity_id: alarm_control_panel.dsc_1500_alarm_panel
        data:
          code: !secret dsc_alarm_code

# Automation Configuration - TOP LEVEL SECTION
# This section defines automations (NOT nested under mqtt!)
automation:
  # System Health Monitoring
  - alias: "DSC System Health Alert"
    trigger:
      - platform: state
        entity_id: binary_sensor.dsc_system_health
        to: "on"  # Problem detected
    action:
      - service: notify.persistent_notification
        data:
          title: "DSC System Alert"
          message: "DSC alarm system has detected a problem. Check diagnostics."
      - service: logbook.log
        data:
          name: "DSC System"
          message: "System health problem detected"

  # Keybus Disconnection Alert
  - alias: "DSC Keybus Disconnected Alert"
    trigger:
      - platform: state
        entity_id: binary_sensor.dsc_keybus_connected
        to: "off"
        for: "00:01:00"  # Alert after 1 minute
    action:
      - service: notify.persistent_notification
        data:
          title: "DSC Keybus Disconnected"
          message: "DSC alarm system communication lost"

# ============================================================================
# COMMON CONFIGURATION MISTAKES TO AVOID:
# ============================================================================
#
# ❌ WRONG - Nesting automation under mqtt:
# mqtt:
#   broker: ...
#   automation:  # <- This is INCORRECT!
#     - alias: ...
#
# ❌ WRONG - Nesting mqtt under mqtt:  
# mqtt:
#   broker: ...
#   mqtt:  # <- This is INCORRECT!
#     discovery: true
#
# ❌ WRONG - Missing top-level sections:
# mqtt:
#   broker: ...
#   alarm_control_panel:  # <- This should be at root level!
#     - name: ...
#
# ✅ CORRECT - All sections at root level:
# mqtt:
#   broker: ...
# 
# alarm_control_panel:
#   - name: ...
#
# automation:
#   - alias: ...
#
# ============================================================================
# STRUCTURE VALIDATION:
# ============================================================================
# Before using this configuration:
# 1. Ensure your secrets.yaml contains all required values
# 2. Check YAML syntax with: python3 -c "import yaml; yaml.safe_load(open('configuration.yaml'))"
# 3. Run Home Assistant configuration check: hass --script check_config
# 4. Validate DSC-specific config: python3 validate_config.py