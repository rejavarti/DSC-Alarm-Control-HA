# DSC Classic Hardware Communication Diagnostic
# Minimal config for testing panel communication

substitutions:
  accessCode: !secret access_code
  clock_pin: "18"    # Yellow wire - DSC Clock
  read_pin: "19"     # Green wire - DSC Data  
  write_pin: "21"    # Black wire - DSC Data Out
  pc16_pin: "17"     # Brown/Purple - PC16 (CRITICAL for Classic)

esphome:
  name: dsc-diagnostic
  comment: "DSC Classic communication test"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
  level: DEBUG
  baud_rate: 115200
  logs:
    dsc_keybus: DEBUG

api:

external_components:
  - source:
      type: local
      path: extras/ESPHome/components
    components: [dsc_keybus]

# Diagnostic DSC configuration
dsc_keybus:
  id: dsc_interface
  access_code: ${accessCode}
  series_type: "Classic"
  
  clock_pin: ${clock_pin}
  read_pin: ${read_pin}
  write_pin: ${write_pin}
  pc16_pin: ${pc16_pin}
  
  debug: 3  # Maximum debugging
  
  # Enhanced timing for hardware diagnosis (adjusted to valid ranges)
  classic_timing_mode: true
  hardware_detection_delay: 10000   # 10 seconds (max allowed is 10000)
  initialization_timeout: 60000     # 60 seconds (max allowed is 60000)
  retry_delay: 5000                 # 5 seconds (max allowed is 5000)
  
  # CRITICAL FIX: Enable standalone mode since no physical DSC panel is connected
  # This prevents the infinite loop of hardware initialization attempts seen in the log
  standalone_mode: true  # FIXED: Enable standalone mode for testing without physical DSC panel

# Monitor panel connection status
text_sensor:
  - platform: template
    id: connection_status
    name: "Panel Connection Status"

script:
  - id: connection_monitor
    mode: restart
    then:
      - delay: 5s
      - lambda: |-
          ESP_LOGI("diagnostic", "=== DSC Hardware Diagnostic Monitor ===");
          ESP_LOGI("diagnostic", "Monitor for these messages:");
          ESP_LOGI("diagnostic", "✅ SUCCESS: 'DSC Classic hardware initialization successful'");
          ESP_LOGI("diagnostic", "❌ FAILURE: 'esp32_hardware_initialized=false'");
          ESP_LOGI("diagnostic", "❌ TIMEOUT: 'permanently failed after X attempts'");

interval:
  - interval: 60s
    then:
      - script.execute: connection_monitor
