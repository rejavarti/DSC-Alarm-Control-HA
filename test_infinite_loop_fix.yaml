# ESPHome Test Configuration for DSC Infinite Loop Fix
# This configuration can be used to test that the infinite loop fix works correctly

substitutions:
  name: "dscalarm-test-fix"
  friendly_name: "DSC Alarm Test Fix"
  access_code: "1234"  # Replace with your actual access code

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    # Use ESP-IDF configuration that might trigger the infinite loop issue
    sdkconfig_options:
      CONFIG_ESP_MAIN_TASK_STACK_SIZE: "20480"
      CONFIG_ESP32_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ: "240"
      CONFIG_FREERTOS_HZ: "1000"

# Enable logging to see the fix in action
logger:
  level: DEBUG
  logs:
    dsc_keybus: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

# Enable OTA updates
ota:
  platform: esphome
  password: !secret ota_password

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${name} Fallback"
    password: !secret ap_password

# The DSC Keybus component that includes the infinite loop fix
external_components:
  - source:
      type: local
      path: extras/ESPHome/components
    components: [dsc_keybus]
    refresh: 0s

# DSC Keybus configuration for Classic Series (most likely to trigger the issue)
dsc_keybus:
  id: dsc_panel
  clock_pin: GPIO18
  read_pin: GPIO19
  write_pin: GPIO21
  pc16_pin: GPIO17  # Required for Classic Series
  access_code: ${access_code}
  # Enable debug logging to monitor the fix
  debug: 1

# Test sensors to verify the component works after the fix
sensor:
  - platform: dsc_keybus
    dsc_keybus_id: dsc_panel
    name: "${friendly_name} Ready"
    type: ready
    partition: 1

binary_sensor:
  - platform: dsc_keybus
    dsc_keybus_id: dsc_panel
    name: "${friendly_name} Connected"
    type: keybus_connected

text_sensor:
  - platform: dsc_keybus
    dsc_keybus_id: dsc_panel
    name: "${friendly_name} Status"
    type: status
    partition: 1

# Template sensors to monitor system health and detect if the fix is working
  - platform: template
    name: "${friendly_name} Loop Fix Status"
    id: loop_fix_status
    update_interval: 30s
    lambda: |-
      // This will be updated by the DSC component to show fix status
      return {"Active"};

# Diagnostic information to verify the fix is working
  - platform: template
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    lambda: |-
      uint32_t dur = id(uptime).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      return (String(dys) + "d " + String(hrs) + "h " + String(mnts) + "m " + String(dur) + "s").c_str();

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime Raw"
    id: uptime
    update_interval: 60s
    internal: true

  - platform: template
    name: "${friendly_name} Free Memory"
    update_interval: 30s
    unit_of_measurement: "bytes"
    accuracy_decimals: 0
    lambda: |-
      return esp_get_free_heap_size();

# Expected behavior with the fix:
# 1. System should start up normally
# 2. If hardware initialization fails, you should see rate-limited "System stabilized" messages (max every 5 seconds)
# 3. After reasonable attempts, the system should log a circuit breaker message and mark initialization as failed
# 4. The system should remain stable and responsive to Home Assistant
# 5. No infinite log spam or system lockup should occur

# Test procedure:
# 1. Flash this configuration to an ESP32
# 2. Connect Classic Series DSC panel wiring (or leave disconnected to simulate initialization issues)
# 3. Monitor logs for proper behavior:
#    - Rate-limited logging instead of spam
#    - Circuit breaker activation if needed
#    - System remains responsive
# 4. Verify uptime continues to increase (system doesn't restart due to infinite loops)