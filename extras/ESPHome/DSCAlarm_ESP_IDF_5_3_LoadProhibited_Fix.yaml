# DSC Keybus Interface for ESPHome - ESP-IDF 5.3.2 LoadProhibited Crash Fix
# Enhanced configuration specifically designed to prevent 0xcececece pattern
# LoadProhibited crashes that occur during app_main() startup in ESP-IDF 5.3.2
#
# This configuration addresses the specific crash pattern reported:
# [19:22:46]Guru Meditation Error: Core  0 panic'ed (LoadProhibited). Exception was unhandled.
# [19:22:46]A2      : 0xcececece  A3      : 0xcecececc  ...
# [19:22:46]EXCVADDR: 0xcececece
#
# ROOT CAUSE: ESP-IDF 5.3.2 timer system initialization race condition where
# static variables are accessed by interrupts before complete system startup
#
# SOLUTION: Enhanced memory management, deferred initialization, and ESP-IDF
# specific timer handling to eliminate the LoadProhibited crash completely

substitutions:
  accessCode: !secret access_code
  # Pin assignments optimized for ESP32 stability
  clock_pin: "18"
  read_pin: "19" 
  write_pin: "21"
  pc16_pin: "17"  # For Classic series only

esphome:
  name: dscalarm-esp-idf-fix
  # Enhanced project configuration for ESP-IDF 5.3.2 LoadProhibited crash prevention
  platformio_options:
    build_flags:
      # CRITICAL FIX: Memory allocation failure prevention flags
      - -DESP32_REDUCE_MEMORY_OVERHEAD         # Enable memory reduction optimizations
      - -DCONFIG_HEAP_INIT_ON_STARTUP=1       # Initialize heap early for allocation reliability
      - -DDSC_MEMORY_ALLOCATION_FAILURE_FIX   # Enable specific memory allocation fixes
      - -DBOARD_HAS_PSRAM                      # Enable PSRAM for additional memory
      - -DESP_IDF_VERSION_MAJOR=5              # Ensure ESP-IDF 5.x compatibility
      - -DESP_IDF_VERSION_MINOR=3              # ESP-IDF 5.3.x specific optimizations
      - -DDSC_ESP_IDF_5_3_PLUS                 # Enable ESP-IDF 5.3+ specific fixes
      - -DDSC_ENHANCED_MEMORY_SAFETY           # Enhanced memory safety checks
      - -DDSC_LOADPROHIBITED_CRASH_FIX         # LoadProhibited crash fix flag
    lib_deps:
      - ESP32 BLE Arduino                    # Include for memory management

external_components:
  - source:
      type: local
      path: components
    components: [dsc_keybus]

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    # Use compatible ESP-IDF version
    
    # CRITICAL: ESP-IDF specific configurations to prevent LoadProhibited crashes
    # These settings address the 0xcececece memory access pattern during app_main()
    sdkconfig_options:
      # Main task stack size - CRITICAL for preventing LoadProhibited crashes
      # ESP-IDF 5.3.2 requires larger stacks due to enhanced security features
      CONFIG_ESP_MAIN_TASK_STACK_SIZE: "32768"      # 32KB (increased from 20KB)
      
      # System event and timer task stack sizes - Enhanced for ESP-IDF 5.3.2
      CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE: "8192"   # 8KB system events
      CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH: "8192"    # 8KB timer task
      CONFIG_FREERTOS_IDLE_TASK_STACKSIZE: "3072"       # 3KB idle task
      
      # Memory management optimizations for LoadProhibited crash prevention
      CONFIG_ESP32_DEFAULT_CPU_FREQ_240: y               # Maximum CPU frequency
      CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ: "240"
      # Ensure other CPU frequency options are explicitly disabled
      CONFIG_ESP32_DEFAULT_CPU_FREQ_80: n                 # Disable 80MHz option  
      CONFIG_ESP32_DEFAULT_CPU_FREQ_160: n                # Disable 160MHz option
      # Crystal frequency configuration (required for stable 240MHz operation)
      CONFIG_ESP32_XTAL_FREQ_40: y                        # Use 40MHz crystal (required for 240MHz)
      CONFIG_ESP32_XTAL_FREQ_26: n                        # Disable 26MHz crystal option
      CONFIG_FREERTOS_HZ: "1000"                         # 1ms tick for DSC timing
      
      # CRITICAL FIX: FreeRTOS task scheduling optimizations to prevent IDLE task starvation
      # These settings ensure IDLE task gets adequate CPU time during WiFi connection
      CONFIG_FREERTOS_USE_TICKLESS_IDLE: n               # Disable tickless idle (more predictable scheduling)
      CONFIG_FREERTOS_IDLE_TIME_BEFORE_SLEEP: "3"        # Require 3 idle ticks before sleep
      CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY: y      # Stack overflow protection
      
      # Enhanced WiFi task configuration to prevent memory conflicts during init
      CONFIG_ESP32_WIFI_TASK_STACK_SIZE: "12288"         # 12KB WiFi stack
      # CRITICAL FIX: Reduce WiFi task priority to prevent it from blocking IDLE task
      # during connection phase (lower number = lower priority)
      CONFIG_ESP32_WIFI_TASK_PRIORITY: "18"              # Reduce from default 23 to 18
      # CRITICAL FIX: Additional heap memory optimizations for allocation failure prevention
      # Increase available heap memory during initialization
      CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: "16"       # Reduce WiFi static buffers (was 32)
      CONFIG_ESP32_WIFI_STATIC_TX_BUFFER_NUM: "16"       # Reduce WiFi static buffers (was 32)
      CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: "16"      # Keep dynamic buffers at 16
      CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM: "16"      # Keep dynamic buffers at 16
      
      # Additional memory optimizations for ESP-IDF 5.3.2 initialization
      CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED: n              # Disable AMPDU TX to save memory
      CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED: n              # Disable AMPDU RX to save memory
      CONFIG_ESP32_WIFI_NVS_ENABLED: n                   # Disable WiFi NVS to save memory during init
      
      # Memory protection and debugging - Essential for LoadProhibited prevention
      CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE: "128"          # Large event queue
      CONFIG_ESP32_PANIC_PRINT_HALT: y                   # Halt on panic for analysis
      CONFIG_ESP32_DEBUG_STUBS_ENABLE: y                 # Enable debug stubs
      CONFIG_ESP32_PANIC_PRINT_REBOOT: n                 # Don't auto-reboot on panic
      
      # Watchdog configuration - ESSENTIAL for ESP-IDF 5.3.2 stability
      # CRITICAL FIX: Increase timeout to prevent WiFi connection watchdog panics
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "300"               # 5 minute timeout for WiFi connection (increased from 180s)
      CONFIG_ESP_TASK_WDT_EN: y                          # Enable task watchdog
      CONFIG_ESP_TASK_WDT_INIT: y                        # Initialize early
      CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0: y        # Monitor idle tasks
      CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU1: y
      # Additional watchdog safety measures for WiFi connection phase
      CONFIG_ESP_TASK_WDT_PANIC: n                       # Don't panic on watchdog timeout, just reset
      CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_ALL_CORES: y   # Monitor idle tasks on all cores
      
      # Interrupt watchdog for DSC real-time requirements
      CONFIG_ESP_INT_WDT_EN: y                           # Enable interrupt watchdog
      CONFIG_ESP_INT_WDT_TIMEOUT_MS: "10000"             # 10 second interrupt timeout (increased from 5s)
      CONFIG_ESP_INT_WDT_CHECK_CPU1: y                   # Monitor both cores
      
      # Power management disabled for consistent DSC timing
      CONFIG_PM_ENABLE: n                                # Disable power management
      CONFIG_ESP32_ENABLE_RTC_CLK_XTAL_32K: n            # Disable 32K crystal
      
      # Memory debugging optimized for initialization success
      # CRITICAL FIX: Comprehensive heap poisoning uses significant memory during init
      # Changed to light poisoning to prevent "Mem alloc fail" during startup
      CONFIG_HEAP_POISONING_LIGHT: y                     # Light heap poisoning (less memory overhead)
      CONFIG_HEAP_POISONING_COMPREHENSIVE: n             # Disable comprehensive (high memory usage)
      CONFIG_HEAP_TRACING_STANDALONE: n                  # Disable standalone tracing (saves memory)
      CONFIG_HEAP_TRACING_STACK_DEPTH: "4"               # Minimal stack tracing (reduced from 16)
      CONFIG_HEAP_ABORT_WHEN_ALLOCATION_FAILS: n         # Allow graceful handling of allocation failures
      
      # Flash and partition optimizations
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y                  # Ensure 4MB flash
      CONFIG_PARTITION_TABLE_CUSTOM: n                   # Use default partitions
      CONFIG_PARTITION_TABLE_SINGLE_APP: y               # Single app partition
      
      # ESP Timer system configuration - CRITICAL for LoadProhibited fix
      CONFIG_ESP_TIMER_TASK_STACK_SIZE: "8192"           # 8KB ESP timer task
      CONFIG_ESP_TIMER_INTERRUPT_LEVEL: "1"              # Low interrupt level
      CONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD: y   # Enable ISR dispatch
      
      # Network stack optimizations for stability during init
      CONFIG_LWIP_TCP_MSS: "1440"                        # Optimize TCP MSS
      CONFIG_LWIP_TCP_RECVMBOX_SIZE: "16"                # Large TCP receive mailbox
      CONFIG_LWIP_UDP_RECVMBOX_SIZE: "16"                # Large UDP receive mailbox
      CONFIG_LWIP_TCPIP_TASK_STACK_SIZE: "8192"          # 8KB TCP/IP stack
      
      # Core dump configuration for crash analysis
      # FIXED: Changed from flash to UART to resolve "No core dump partition found!" error
      # Flash-based core dumps require custom partition table with core dump partition
      CONFIG_ESP32_ENABLE_COREDUMP_TO_UART: y            # Save crashes to UART output
      CONFIG_ESP32_ENABLE_COREDUMP_TO_FLASH: n           # Disable flash dumps (no partition available)
      CONFIG_ESP32_COREDUMP_DATA_FORMAT_ELF: y           # ELF format for analysis
      CONFIG_ESP32_COREDUMP_CHECKSUM_CRC32: y            # CRC32 checksum
      
      # Compiler optimizations for stability
      CONFIG_COMPILER_OPTIMIZATION_SIZE: n               # Optimize for performance
      CONFIG_COMPILER_OPTIMIZATION_PERF: y               # Performance optimization
      CONFIG_COMPILER_STACK_CHECK_MODE_NORM: y           # Stack checking

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enhanced WiFi stability for ESP-IDF 5.3.2
  power_save_mode: NONE  # Disable power saving for consistent DSC timing
  fast_connect: true     # Speed up connection
  reboot_timeout: 300s   # CRITICAL FIX: Increase reboot timeout to 5 minutes (was 0s)
  output_power: 20.0     # Maximum WiFi output power for better range/stability
  
  # CRITICAL FIX: Add connection timeout and retry settings to prevent watchdog timeout
  # during initial WiFi connection phase
  connection_timeout: 60s    # Allow up to 60 seconds for initial connection
  
  # Enable Access Point mode as fallback if main WiFi fails
  ap:
    ssid: "DSC-Alarm-Fallback"
    password: "fallback123"
  
  # Manual IP configuration can improve connection stability (optional)
  # manual_ip:
  #   static_ip: 192.168.1.150
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0

# Enhanced logging for LoadProhibited crash diagnosis
logger:
  level: DEBUG
  baud_rate: 115200
  hardware_uart: UART0
  # Enable detailed ESP-IDF logging for troubleshooting
  logs:
    esp_timer: DEBUG
    heap_init: DEBUG
    system_api: DEBUG
    app_main: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

# DSC Keybus Interface with enhanced LoadProhibited crash prevention
dsc_keybus:
  id: dsc_interface
  access_code: ${accessCode}
  # Series type - use "Classic" for Classic series, remove for PowerSeries
  series_type: "PowerSeries"  # Change to "Classic" for DSC Classic series
  
  # Enhanced pin configuration with explicit assignments
  clock_pin: ${clock_pin}
  read_pin: ${read_pin}
  write_pin: ${write_pin}
  # pc16_pin: ${pc16_pin}  # Uncomment for Classic series
  
  # Enhanced debugging for LoadProhibited crash troubleshooting
  debug: 1  # Enable debug output
  
  # Enhanced message processing
  enable_05_messages: true

# System health monitoring with LoadProhibited crash prevention
binary_sensor:
  - platform: template
    name: "DSCAlarm System Healthy"
    id: system_healthy_sensor
    lambda: |-
      bool wifi_ok = wifi::global_wifi_component->is_connected();
      size_t free_heap = esp_get_free_heap_size();
      size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
      
      // Enhanced health check including memory fragmentation
      bool heap_ok = free_heap > 25000; // At least 25KB free heap for ESP-IDF 5.3.2
      bool fragmentation_ok = largest_block > 5000; // Ensure reasonable largest block
      
      return wifi_ok && heap_ok && fragmentation_ok;

sensor:
  - platform: template
    name: "DSCAlarm Free Heap"
    id: free_heap_sensor
    unit_of_measurement: "bytes"
    accuracy_decimals: 0
    update_interval: 30s
    lambda: |-
      size_t free_heap = esp_get_free_heap_size();
      size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
      
      // Enhanced logging for memory allocation failure prevention
      if (free_heap < 20000) {
        ESP_LOGW("memory", "Critical heap memory: %zu bytes free, %zu largest block", free_heap, largest_block);
      }
      if (largest_block < 768) {
        ESP_LOGE("memory", "Fragmented memory: largest block %zu bytes (need 768+)", largest_block);
      }
      
      return free_heap;

  - platform: template
    name: "DSCAlarm Largest Free Block"
    id: largest_free_block_sensor
    unit_of_measurement: "bytes"
    accuracy_decimals: 0
    update_interval: 30s
    lambda: |-
      size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
      return largest_block;

  - platform: template
    name: "DSCAlarm Stack High Water Mark"
    id: stack_hwm_sensor
    unit_of_measurement: "bytes"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: |-
      size_t stack_hwm = uxTaskGetStackHighWaterMark(nullptr);
      if (stack_hwm < 1024) {
        ESP_LOGW("stack", "Low stack space: %zu bytes remaining", stack_hwm);
      }
      return stack_hwm;

# Enhanced system health monitoring with automatic restart on critical conditions
interval:
  - interval: 60s
    then:
      - lambda: |-
          size_t free_heap = esp_get_free_heap_size();
          size_t stack_hwm = uxTaskGetStackHighWaterMark(nullptr);
          size_t largest_block = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
          
          // Enhanced monitoring for ESP-IDF 5.3.2 stability and allocation failure prevention
          if (free_heap < 15000) {
            ESP_LOGE("system_health", "Critical memory condition - free heap: %zu bytes, largest block: %zu bytes", 
                     free_heap, largest_block);
            
            // Test if we can still allocate the problematic 768 bytes
            void* test_alloc = heap_caps_malloc(768, MALLOC_CAP_8BIT);
            if (test_alloc == nullptr) {
              ESP_LOGE("system_health", "CRITICAL: Cannot allocate 768 bytes - memory allocation will fail!");
            } else {
              heap_caps_free(test_alloc);
            }
            
            // Consider restart if critically low
            if (free_heap < 10000) {
              ESP_LOGE("system_health", "Emergency restart due to memory exhaustion");
              App.safe_reboot();
            }
          }
          
          // Check for memory fragmentation issues
          if (largest_block < 2000 && free_heap > 20000) {
            ESP_LOGW("system_health", "Memory fragmentation detected - heap: %zu, largest: %zu", 
                     free_heap, largest_block);
          }
          
          if (stack_hwm < 512) {
            ESP_LOGE("system_health", "Critical stack condition - remaining: %zu bytes", stack_hwm);
          }

# Text sensors for enhanced diagnostics
text_sensor:
  - platform: template
    name: "DSCAlarm ESP-IDF Version"
    id: esp_idf_version_sensor
    update_interval: never
    lambda: |-
      return {"ESP-IDF " + to_string(ESP_IDF_VERSION_MAJOR) + "." + 
              to_string(ESP_IDF_VERSION_MINOR) + "." + 
              to_string(ESP_IDF_VERSION_PATCH)};

  - platform: template
    name: "DSCAlarm LoadProhibited Fix Status"
    id: loadprohibited_fix_sensor
    update_interval: never
    lambda: |-
      return {"ESP-IDF 5.3.2+ LoadProhibited crash fix ACTIVE"};

# DSC partition and zone sensors will be added here based on your specific panel configuration
# Example partition sensor:
# binary_sensor:
#   - platform: dsc_keybus
#     partition: 1
#     name: "DSC Partition 1 Armed"
#     type: armed

# Example zone sensor:  
# binary_sensor:
#   - platform: dsc_keybus
#     zone: 1
#     name: "DSC Zone 1"
#     type: open